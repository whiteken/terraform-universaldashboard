parameters:
  - name: terraformOperation
    displayName: Terraform operation
    type: string
    default: ''

stages:
- stage: Terraform_Plan  # name of the stage (A-Z, a-z, 0-9, and underscore)
  displayName: Terrfrom Plan  # friendly name to display in the UI
  dependsOn: []
  condition: eq(${{ parameters.terraformOperation }},'plan')
  variables: # several syntaxes, see specific section
  jobs:
- deployment: plan   # name of the deployment job, A-Z, a-z, 0-9, and underscore. The word "deploy" is a keyword and is unsupported as the deployment name.
  displayName: plan  # friendly name to display in the UI
  pool:                # see pool schema
    name: windows-latest       # Use only global level variables for defining a pool name. Stage/job level variables are not supported to define pool name.
    demands: []
  workspace:
    clean: all # what to clean up before the job runs
  continueOnError: true                # 'true' if future jobs should run even if this job fails; defaults to 'false'
  timeoutInMinutes: 3       # how long to run the job before automatically cancelling
  cancelTimeoutInMinutes: 2  # how much time to give 'run always even if cancelled tasks' before killing them
  variables: # several syntaxes, see specific section
  environment: string  # target environment name and optionally a resource name to record the deployment history; format: <environment-name>.<resource-name>
  strategy:
    runOnce:    #rolling, canary are the other strategies that are supported
      deploy:
        steps:
        - task: TerraformInstaller
          displayName: install terraform
          inputs:
            terraformVersion: 0.14.5

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              Get-ChildItem -Path $(Pipeline.Workspace)
              $files = Get-ChildItem $env:Pipeline_Workspace -Recurse -Verbose
              $files | Measure-Object
              $files | ForEach-Object {Write-Host $_.FullName}